今天目标：
	1. 自动化相关概念知识
	2. 自动化相关环境搭建
	3. 元素定位
	
一、课程大纲
	1. 核心重点(第二章)
	2. 提高代码质量，自动化水平(第三、四、五、六章)
	3. 项目实战(第七章)
	4. 理论及环境与定位(第一章)

二、自动化相关理论知识
	2.1 自动化 
		说明：让机器设备代替人为完成指定目标的而过程
		优点：
			1. 减少劳动力
			2. 提高效率(批量生产)
			3. 提高产品质量
			4. 规格统一标准
		
	
	2.2 自动化测试
		说明：让程序或工具代替人为对程序功能验证的过程
		解决： 
			1. 回归测试[重点]
			2. 压力测试
			3. 兼容性(1. 浏览器、2. 分辨率 3. 操作系统)
			4. 提高测试效率
			
		优点： 
			1. 在最短时间内运行最多的bug
			2. 脚本重复运行
			3. 减少人为错误
			4. 克服手工测试局限性（图片大小）
			
		误区：
			1. 自动化测试比手工厉害
			2. 自动化测试比手工发现更多bug
			3. 自动化测试可以完全替代手工测试
			4. 软件所有功能都适合自动化测试。
			
	
	2.3 自动化测试分类 
	
		1. Web自动化测试【本阶段学习】
		2. 移动自动化测试(app自动化)
		3. 接口自动化（工具、代码）
		4. 单元测试
	
	2.4 web自动化测试
		概念：让程序代替人为对web项目进功能验证过程
		
		什么web项目适合自动化？
			1. 需求变动不频繁
			2. 需要回归测试项目
			3. 项目周期长
			
		web自动化开始进行阶段？
			手工测试之后(1. 时间问题 2. 功能不完善)
			
		web自动化所属分类
			1. 黑盒测试
			2. 灰盒测试
			3. 白盒测试
			
		提示：
			1. 以上分类为站在代码可见度上划分
			2. web自动化测试属于黑盒测试
			
二、自动化工具
	2.1 主流自动化工具
			1. QTP: 收费 支持(支持web、桌面软件自动化)
			2. selenium: 免费 开源 只支持web项目 【本阶段学习】
			3. Robot framework: 基于python扩展关键字驱动自动化工具。2014年停止更新
			
	2.2 什么是selenium？
			一个web自动化测试工具， 中文的意思：硒
			
	2.3 特点：
		1. 开源、免费
		2. 跨平台(Linux windows mac)
		3. 支持多浏览器：谷歌 火狐 IE
		4. 支持多语言：python、java...等等
		5. 成熟稳定：已经被 谷歌、百度大型公司广泛使用
		6. 功能强大：支持商业化大部分功能，并且由于开源，可以定制化需求功能。
		
		
	2.4 slenium家族介绍
		版本：
			selenium1.0 
				1. selenium IDE (录制自动化代码工具)
				2. selenium Grid (分布式工具：同时启动多个浏览器)
				3. selenium RC(通过JS模拟浏览器，实现自动化方式)
			selenium2.0(稳定推荐版)
				selenium2.0 = selenium1.0+webdriver
				
			selenium3.0
				2.0升级版，支持JAVA8、woindows10 Edge浏览器、safa浏览器
				
			提示：无论是通过2.0还是3.0编写的自动化脚本，API方法是不变的，唯一不同就是环境不同。
			
三、selenium
	3.1 安装：
			1). 通过pip包管理工具去安装
				安装：
					pip install selenium
				查看：
					pip show selenium
				卸载：
					pip uninstall selenium
					
				扩展：
					1. 安装指定版本 pip install selenium==版本号  如：pip install selenium==2.48.0
					2. 如何查看可安装按本？ 指定版本号为错误版本号
					3. pip是python中包管理工具(可以安装，卸载、查看python工具)
					4. pip list:查看通过pip包管理工具安装的插件或工具
				提示： 
					1. 使用pip必须联网
					2. 默认安装python3.5版本以上工具，自带pip包管理工具，默认会自动安装并且添加path环境变量
			
			2). 通过pycharm去安装【推荐】
				推荐原因：安装到当前工程环境内。
				操作：
					File（文件菜单）-->setting-->Project: 当前工程名称-->Project Interpreter--点击+号安装相应包和版本
					
				提示：如果使用pip install 插件名 安装过后，打开pycharm，导包操作时，提示找不到此包，那就说明使用pip install 默认安装的路径和当前工程所有的环境路径不是同一个环境，进行以上处理可以解决问题。
					

			
	3.2 浏览器及驱动安装
			浏览器
				火狐：可以官网或百度获取浏览器版本。
				谷歌：通过百度。
			
			驱动：
				1. 火狐：https://github.com/mozilla/geckodriver/releases/
				2. 谷歌：http://chromedriver.storage.googleapis.com/index.html
				
			应用：
				1. 将浏览器驱动放到指定文件夹
				2. 将浏览器驱动所在目录添加到系统path环境变量中
				(选中我的电脑/此电脑-右键-->属性-->高级系统设置-->高级（环境变量）-->path(如果是wind7路径与路径之间需要添加分号))
			注意：
				1. 浏览器驱动必须和浏览器版本对应(查看下载驱动时，有告知响应的浏览器版本)
				2. 获取浏览器48版本以下，内置驱动。
				
	3.3 科普path
		说明：指定系统搜索的目录
		dos命令默认搜索顺序：
			1. 检测是否为内部命令
			2. 检测是否为当前目录下可执行文件
			3. 检测path环境变量指定的目录
			
			提示：
				1. 如果以上搜索目录都检测不到输入的命令或可执行文件，系统会抛出不是内部或外部命令...
				2. 在web环境中，如果不将浏览器驱动添加到path中，selenium在运行的时候会提示浏览器驱动有误。
				
	3.4 第一个案例
		# 导包 
		from selenium import webdriver
		from time import sleep
		
		# 获取浏览器驱动
		driver = webdriver.Chrome()
		# 打开url
		driver.get("http://www.baidu.com")
		# 暂停3秒
		sleep(3)
		# 关闭浏览器驱动
		driver.quit()
		
四、元素定位
	4.1 为什么要使用元素定位？
		要使用web自动化操作元素，必须首先找到此元素。
	4.2 定位工具
		火狐：Firebug （F12获取直接点击 Friebug图标）
		谷歌：F12键(开发者工具)
	4.3 定位元素时依赖于什么？
		1. 标签名
		2. 属性
		3. 层级
		4. 路径
		
	4.4 定位方式
		1. id
		2. name
		3. class_name（使用元素的class属性定位）
		4. teg_name（标签名称 <标签名 .../>）
		5. link_text(定位超连接 a标签)
		6. partial_link_text(定位超链接 a标签 模糊)
		7. xpath(基于元素路径)
		8. css（元素选择器）
		
		汇总：
			1. 基于元素属性特有定位方式(id\name\class_name)
			2. 基于元素标签名称定位：tag_name
			3. 定位超链接文本(link_text、partial_link_text)
			4. 基于元素路径定位(xpath)
			5. 基于选择器(css)
			
	id 定位：
		说明：
			1. 通过元素的id属性定位，id一般情况下在当前页面中是唯一。
		方法：
			driver.find_element_by_id(id)
		提示：
			元素必须要有id属性。
			
		案例：
			# 导包 
			# 获取浏览器驱动对象
			# 打开url 
			# 查找用户名文本框
			# 查找密码框文本框
			# 输入用户名
			# 输入密码
			# 暂停3秒
			# 关闭驱动
		提示： 
			1. 输入方法：send_keys("输入内容")；
			2. 退出浏览器驱动：driver.quit();
			3. 打开url： driver.get(url)
			4. 导包：from selenium import webdriver
			5. 获取火狐浏览器驱动对象 driver = webdriver.Firefox()
			
	name 定位： 
		说明：
			1. 通过元素的name属性来定位， name一般名称为重复。
			
		方法： 
			drivr.find_element_by_name(name)
		提示： 
			元素必须要有name属性 
			
	class_name定位：
		说明： 
			1. 通过元素的class属性来定位，class属性一般为多个值。
		方法： 
			driver.find_element_by_class_name()
		
		提示： 
			元素必须要有class属性
			
	提示： 
		id: 一般为唯一标识符。
		name:可以重名
		class:多个命名。